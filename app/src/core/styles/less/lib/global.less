// MEDIA QUERIES (more than needed)
// -- DESKTOP
@largescreen:   ~"only screen and (min-width : 1824px)";
@bigdesktop:   ~"only screen and (min-width : 1224px)";
@desktop:   ~"only screen and (min-width: 960px)"; 				// 996px
@belowdesktop: ~"only screen and (max-width : 959px)"; 			// 995px
@smalldesktoplaptop: ~"only screen and (max-width : 849px)";
@tinydesktoplaptop: ~"only screen and (max-width : 639px)";
@ridiculousdesktoplaptop: ~"only screen and (max-width : 429px)";
// -- TABLET
@ipad: ~"only screen and (min-device-width : 768px) and (max-device-width : 1024px)";
@ipadlandscape: ~"only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : landscape)";
@ipadportrait: ~"only screen and (min-device-width : 768px) and (max-device-width : 1024px) and (orientation : portrait)";
// -- SMARTPHONE
@smartphone: ~"only screen and (min-device-width : 320px) and (max-device-width : 480px)";
@smartphonelandscape: ~"only screen and (min-width : 321px) and (max-width : 480px)";
@smartphoneportrait: ~"only screen and (max-width : 320px)";
@iphone4: ~"only screen and (-webkit-min-device-pixel-ratio : 1.5), only screen and (min-device-pixel-ratio : 1.5)";
@iphone4landscape: ~"only screen and (-webkit-min-device-pixel-ratio : 1.5) and (orientation: landscape) and (min-device-width : 320px) and (max-device-width : 480px), only screen and (min-device-pixel-ratio : 1.5) and (orientation: landscape) and (min-device-width : 320px) and (max-device-width : 480px)";
@iphone4portrait: ~"only screen and (-webkit-min-device-pixel-ratio : 1.5) and (orientation: landscape) and (max-device-width : 320px), only screen and (min-device-pixel-ratio : 1.5) and (orientation: landscape) and (max-device-width : 320px)";
// @tablet:    ~"only screen and (min-width: 720px) and (max-width: 959px)";
// -- RETINA DISPLAY
@retina: ~"only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi)";
@retinamacbook: ~"only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 1300px), only screen and (min--moz-device-pixel-ratio: 2) and (min-width: 1300px), only screen and (-o-min-device-pixel-ratio: 2/1) and (min-width: 1300px), only screen and (min-device-pixel-ratio: 2) and (min-width: 1300px), only screen and (min-resolution: 192dpi) and (min-width: 1300px), only screen and (min-resolution: 2dppx) and (min-width: 1300px)";
// -- QUICK SELECTORS, FOR EASY CHANGE
@size-XXS: 	@smartphoneportrait;
@size-XS: 	@smartphonelandscape;
@size-S: 		@ipadportrait;
@size-M: 		@ipadlandscape;
@size-L: 		@belowdesktop;
@size-XL: 	@desktop;
@size-XXL: 	@bigdesktop;
@size-XXXL: @largescreen;


//---------------------------------------------
// GRID
@full: 				100%;
@baseline: 		1.5;
@gutter: 			30px;


// Optional hyphenation
.hyphens(@mode: auto) {
	word-wrap: 				break-word;
	overflow-wrap: 		break-word;
	-webkit-hyphens: 	@mode;
	-moz-hyphens: 		@mode;
	-ms-hyphens: 			@mode;
	-o-hyphens: 			@mode;
	hyphens: 					@mode;
}

// Display
.hide() 				{display: none;}
.inline-block() {display: inline-block;}
.inline() 			{display: inline;}
.block() 				{display: block;}
.table() 				{display: table;}
.table-row() 		{display: table-row;}
.table-cell() 	{display: table-cell;}

// Visibility
.visible() 			{visibility: visible;}
.hidden() 			{visibility: hidden;}

// Float
.left() 				{float: left;}
.right() 				{float: right;}
.nofloat() 			{float: none;}

// Position
.static() 			{position: static;}
.relative() 		{position: relative;}
.absolute() 		{position: absolute;}
.fixed() 				{position: fixed;}

// Box Sizing
.boxsizing (@boxmodel: ~"border-box") {
	-webkit-box-sizing: 	@boxmodel; 		// Safari <= 5
	-moz-box-sizing: 			@boxmodel; 		// Firefox <= 19
	box-sizing: 					@boxmodel;
	&:before,
	&:after {
		-webkit-box-sizing: 	@boxmodel;
		-moz-box-sizing: 			@boxmodel;
		box-sizing: 					@boxmodel;
	}
}

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of 'table' rather than 'block' is only necessary if using
//    ':before' to contain the top-margins of child elements.
.clearfix() {
	*zoom: 1;
	&:before,
	&:after {
		content: " "; 			// 1
		display: table; 			// 2
		// Fixes Opera/contenteditable bug:
		// http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

// Opacity
.opacity(@opacity: 0.5) {
	-moz-opacity: 			@opacity;
	-khtml-opacity: 		@opacity;
	-webkit-opacity: 		@opacity;
	opacity: 						@opacity;
	@opperc: 						@opacity * 100;
	-ms-filter: 				~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{opperc})";
	filter: 						~"alpha(opacity=@{opperc})";
}

// CSS3 Content Columns
.content-columns(@width, @count, @gap) {
	-webkit-column-width: 	@width;
	-moz-column-width: 			@width;
	column-width: 					@width;
	-webkit-column-count: 	@count;
	-moz-column-count: 			@count;
	column-count: 					@count;
	-webkit-column-gap: 		@gap;
	-moz-column-gap: 				@gap;
	column-gap: 						@gap;
}

// Transitions
.transition(@transition) {
	-webkit-transition: 	@transition;
	-moz-transition: 			@transition;
	-o-transition: 				@transition;
	transition: 					@transition;
}
.transition-delay(@transition-delay) {
	-webkit-transition-delay: @transition-delay;
	-moz-transition-delay: 		@transition-delay;
	-o-transition-delay: 			@transition-delay;
	transition-delay: 				@transition-delay;
}
.transition-duration(@transition-duration) {
	-webkit-transition-duration: 	@transition-duration;
	-moz-transition-duration: 		@transition-duration;
	-o-transition-duration: 			@transition-duration;
	transition-duration: 					@transition-duration;
}

// Animations
.animation-delay(@animation-delay) {
	-webkit-animation-delay: 	@animation-delay;
	-moz-animation-delay: 		@animation-delay;
	-o-animation-delay: 			@animation-delay;
	animation-delay: 					@animation-delay;
}

// Translate
.translate(@x, @y) {
	-webkit-transform+_: 	translate(@x, @y);
	-moz-transform+_: 		translate(@x, @y);
	-o-transform+_:				translate(@x, @y);
	transform+_:					translate(@x, @y);
}
.translateX(@x) {
	-webkit-transform+_: 	translateX(@x);
	-moz-transform+_: 		translateX(@x);
	-o-transform+_:				translateX(@x);
	transform+_:					translateX(@x);
}
.translateY(@y) {
	-webkit-transform+_: 	translateY(@y);
	-moz-transform+_: 		translateY(@y);
	-o-transform+_:				translateY(@y);
	transform+_:					translateY(@y);
}
.translateZ(@z) {
	-webkit-transform+_: 	translateZ(@z);
	-moz-transform+_: 		translateZ(@z);
	-o-transform+_:				translateZ(@z);
	transform+_:					translateZ(@z);
}
.translate3d(@x, @y, @z) {
	-webkit-transform+_: 	translate3d(@x, @y, @z);
	-moz-transform+_: 		translate3d(@x, @y, @z);
	-o-transform+_:				translate3d(@x, @y, @z);
	transform+_:					translate3d(@x, @y, @z);
}

// Rotate
.rotate(@deg) {
	-webkit-transform+_: 	rotate(@deg);
	-moz-transform+_: 		rotate(@deg);
	-o-transform+_:				rotate(@deg);
	transform+_:					rotate(@deg);
}
.rotate3d(@x, @y, @z, @deg) {
	-webkit-transform+_: 	rotate3d(@x, @y, @z, @deg);
	-moz-transform+_: 		rotate3d(@x, @y, @z, @deg);
	-o-transform+_:				rotate3d(@x, @y, @z, @deg);
	transform+_:					rotate3d(@x, @y, @z, @deg);
}

// Skew
.skew(@xdeg, @ydeg) {
	-webkit-transform+_: 	skew(@xdeg, @ydeg);
	-moz-transform+_: 		skew(@xdeg, @ydeg);
	-o-transform+_:				skew(@xdeg, @ydeg);
	transform+_:					skew(@xdeg, @ydeg);
}

// Scale
.scale(@x, @y) {
	-webkit-transform+_: 	scale(@x, @y);
	-moz-transform+_: 		scale(@x, @y);
	-o-transform+_:				scale(@x, @y);
	transform+_:					scale(@x, @y);
}
.scale3d(@x, @y, @z) {
	-webkit-transform+_: 	scale3d(@x, @y, @z);
	-moz-transform+_: 		scale3d(@x, @y, @z);
	-o-transform+_:				scale3d(@x, @y, @z);
	transform+_:					scale3d(@x, @y, @z);
}

// Perspective
.perspective(@n) {
	-webkit-transform+_: 	perspective(@n);
	-moz-transform+_: 		perspective(@n);
	-o-transform+_:				perspective(@n);
	transform+_:					perspective(@n);
}

// Appearance (Forms)
.appearance(@a) {
	-webkit-appearance: 	@a;
	-moz-appearance: 			@a;
	-ms-appearance: 			@a;
	appearance: 					@a;
}

// Performance improvement on animated items
// (add this to any element with animations)
.accelerate() {
	-webkit-transform: 		translateZ(0);
	-moz-transform: 			translateZ(0);
	-o-transform: 				translateZ(0);
	transform: 						translateZ(0);
	-webkit-backface-visibility: 	hidden;
	-moz-backface-visibility: 		hidden;
	backface-visibility: 					hidden;
	-webkit-perspective: 	1000;
	-moz-perspective: 		1000;
	perspective: 					1000;
}



// --------------------------------------------------
// Flexbox LESS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
// flex or inline-flex
.flex(@display: flex) {
	display: ~"-webkit-@{display}";
	display: ~"-moz-@{display}";
	display: ~"-ms-@{display}box"; // IE10 uses -ms-flexbox
	display: ~"-ms-@{display}"; // IE11
	display: @display;
}
// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
.flex-columns(@columns: initial) {
	-webkit-flex: @columns;
	-moz-flex: 		@columns;
	-ms-flex: 		@columns;
	flex: 				@columns;
}
// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
.flex-direction(@direction: row) {
	-webkit-flex-direction: 	@direction;
	-moz-flex-direction: 			@direction;
	-ms-flex-direction: 			@direction;
	flex-direction: 					@direction;
}
// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
.flex-wrap(@wrap: nowrap) {
	-webkit-flex-wrap: 	@wrap;
	-moz-flex-wrap: 		@wrap;
	-ms-flex-wrap: 			@wrap;
	flex-wrap: 					@wrap;
}
// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
.flex-flow(@flow) {
	-webkit-flex-flow: 	@flow;
	-moz-flex-flow: 		@flow;
	-ms-flex-flow: 			@flow;
	flex-flow: 					@flow;
}
// Display Order
// - applies to: flex items
// <integer>
.flex-order(@order: 0) {
	-webkit-order: 	@order;
	-moz-order: 		@order;
	-ms-order: 			@order;
	order: 					@order;
}
// Flex grow factor
// - applies to: flex items
// <number>
.flex-grow(@grow: 0) {
	-webkit-flex-grow: 	@grow;
	-moz-flex-grow: 		@grow;
	-ms-flex-grow: 			@grow;
	flex-grow: 					@grow;
}
// Flex shr
// - applies to: flex items shrink factor
// <number>
.flex-shrink(@shrink: 1) {
	-webkit-flex-shrink: 	@shrink;
	-moz-flex-shrink: 		@shrink;
	-ms-flex-shrink: 			@shrink;
	flex-shrink: 					@shrink;
}
// Flex basis
// - the initial main size of the flex item
// - applies to: flex items initial main size of the flex item
// <width>
.flex-basis(@width: auto) {
	-webkit-flex-basis: @width;
	-moz-flex-basis: 		@width;
	-ms-flex-basis: 		@width;
	flex-basis: 				@width;
}
// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
.justify-content(@justify: flex-start) {
	-webkit-justify-content: 	@justify;
	-moz-justify-content: 		@justify;
	-ms-justify-content: 			@justify;
	justify-content: 					@justify;
}
// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
.align-content(@align: stretch) {
	-webkit-align-content: 	@align;
	-moz-align-content: 		@align;
	-ms-align-content: 			@align;
	align-content: 					@align;
}
// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
.align-items(@align: stretch) {
	-webkit-align-items: 	@align;
	-moz-align-items: 		@align;
	-ms-align-items: 			@align;
	align-items: 					@align;
}
// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
.align-self(@align: auto) {
	-webkit-align-self: @align;
	-moz-align-self: 		@align;
	-ms-align-self: 		@align;
	align-self: 				@align;
}



// Base64 image converter, built-in in LESS
// example:
// background-image: data-uri('image/png;base64','../_images/pdf_icon.png');



// Reset filters for IE
// Useful for when you want to remove a gradient from an element.
.reset-filter() {
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
}



// Placeholder mixin
// you just need to specify a color and either bold or italic
// like input { .placeholder(false, bold) }
.placeholdercolor (@color: false) when not (@color=false) {color: @color;}
.placeholderstyle (@style: false) when not (@style=false) {
	.style (@style) when (@style=italic) {font-style: @style;}
	.style (@style) when (@style=bold) {font-weight: @style;}
	.style (@style);
}
.placeholder(@color: false, @style: false) {
	&::-webkit-input-placeholder {
		.placeholdercolor(@color);
		.placeholderstyle(@style);
	}
	&:-moz-placeholder {
		.placeholdercolor(@color);
		.placeholderstyle(@style);
	}
	&::-moz-placeholder {
		.placeholdercolor(@color);
		.placeholderstyle(@style);
	}
	&:-ms-input-placeholder {
		.placeholdercolor(@color);
		.placeholderstyle(@style);
	}
}



// --------------------------------------------------
// Quantity queries mixins
// Github: https://github.com/adjohnson916/quantity-queries.less
// Article: http://alistapart.com/article/quantity-queries-for-css
// --------------------------------------------------
._build-quantity-selector(@selector-append, @selector-sibling) {
	&@{selector-append},
	&@{selector-append} ~ @{selector-sibling} {
		@rules();
	}
}
// exact number of items
.exactly(@count, @selector-sibling, @rules) {
	@selector-append: e(":nth-last-child(@{count}):first-child");
	._build-quantity-selector(@selector-append, @selector-sibling);
}
// at least
.at-least(@count, @selector-sibling, @rules) {
	@selector-append: e(":nth-last-child(n+@{count})");
	._build-quantity-selector(@selector-append, @selector-sibling);
}
// at most
.at-most(@count, @selector-sibling, @rules) {
	@selector-append: e(":nth-last-child(-n+@{count}):first-child");
	._build-quantity-selector(@selector-append, @selector-sibling);
}
// between
.between(@first, @last, @selector-sibling, @rules) {
	@selector-append: e(":nth-last-child(n+@{first}):nth-last-child(-n+@{last}):first-child");
	._build-quantity-selector(@selector-append, @selector-sibling);
}
// example:
// div > span {
// 	.exactly(2, span, {
// 		background: green;
// 	});
// };




//  A mixin which helps you to add depth to elements according to the Google Material Design spec:
//  http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality
//  Author: Florian Kutschera (@gefangenimnetz), Conceptboard GmbH (@conceptboardapp)
//  Example usage:
//   .card {
//       -webkit-transition: all 250ms;
//       -moz-transition: all 250ms;
//       transition: all 250ms;
//       .depth--shadow(1);
//       &:hover {
//           .depth--shadow(3);
//           -webkit-transform: translateY(-5px);
//           -moz-transform: translateY(-5px);
//           transform: translateY(-5px);
//      }
//  }
//
 .depth--shadow(@level: 1) {
    & when (@level = 1) {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    }
    & when (@level = 2) {
        box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
    }
    & when (@level = 3) {
        box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    }
    & when (@level = 4) {
        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
    }
    & when (@level = 5) {
        box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
    }
}



// and now a quick one I hope I'll never need (as mixin to avoid mistypes)
@i: ~"!important";
